// Pizza Teigrechner - Complete Script
document.addEventListener('DOMContentLoaded', function() {
    
    // Track page view
    if (typeof _paq !== 'undefined') {
        _paq.push(['trackPageView']);
    }
    
    // Calculator form handler
    document.getElementById('pizza-calculator').addEventListener('submit', function(event) {
        event.preventDefault();

        // Track calculation
        if (typeof _paq !== 'undefined') {
            _paq.push(['trackEvent', 'Calculator', 'Calculate', 'Teigrechner']);
        }

        // Get input values
        const ballCount = parseFloat(document.getElementById('ball_count').value);
        const ballWeight = parseFloat(document.getElementById('ball_weight').value);
        const hydration = parseFloat(document.getElementById('hydration').value) / 100;
        const yeastType = document.getElementById('yeast_type').value;
        const warmFermentationTime = parseFloat(document.getElementById('warm_fermentation_time').value);
        const warmFermentationTemp = parseFloat(document.getElementById('warm_fermentation_temp').value);
        const coldFermentationTime = parseFloat(document.getElementById('cold_fermentation_time').value);
        const coldFermentationTemp = parseFloat(document.getElementById('cold_fermentation_temp').value);

        // Calculate dough amounts
        const totalDoughWeight = ballCount * ballWeight;
        const flourWeight = totalDoughWeight / (1 + hydration);
        const waterWeight = totalDoughWeight - flourWeight;
        const saltWeight = flourWeight * 0.02; // 2% salt

        debug("Input values", { ballCount, ballWeight, hydration, warmFermentationTime, warmFermentationTemp, coldFermentationTime, coldFermentationTemp });
        debug("Calculated flour", flourWeight);
        debug("Calculated water", waterWeight);
        debug("Calculated salt", saltWeight);

        let totalFermentationTime = 0;
        let yeastPercentage = 0;

        // Calculate fermentation time and yeast amount
        if (coldFermentationTime > 0) {
            const spaltenwertS = getColumnValue(coldFermentationTemp, coldFermentationTime);
            if (spaltenwertS !== undefined) {
                debug("Column value S found", spaltenwertS);

                if (warmFermentationTime > 0) {
                    const valueT = getRowValue(warmFermentationTemp, spaltenwertS);
                    debug("Row value T found", valueT);
                    totalFermentationTime = warmFermentationTime + valueT;
                    debug("Total fermentation time calculated", totalFermentationTime);
                } else {
                    totalFermentationTime = coldFermentationTime;
                    debug("Only cold fermentation used:", totalFermentationTime);
                }
            }
        } else if (warmFermentationTime > 0) {
            totalFermentationTime = warmFermentationTime;
            debug("Only warm fermentation used:", totalFermentationTime);
        }

        if (totalFermentationTime > 0) {
            yeastPercentage = getYeastPercentage(warmFermentationTemp, totalFermentationTime);
            debug("Yeast percentage calculated", yeastPercentage);

            // Adjust for fresh yeast
            if (yeastType === 'CY') {
                yeastPercentage *= 2.5;
            }
        }

        const yeastWeight = flourWeight * yeastPercentage;
        debug("Calculated yeast amount", yeastWeight);

        // Display results with animation
        displayResults(flourWeight, waterWeight, saltWeight, yeastWeight);
    });
});

function displayResults(flour, water, salt, yeast) {
    // Update result values
    document.getElementById('flour-result').textContent = flour.toFixed(0);
    document.getElementById('water-result').textContent = water.toFixed(0);
    document.getElementById('salt-result').textContent = salt.toFixed(1);
    document.getElementById('yeast-result').textContent = yeast.toFixed(1);

    // Show results container with animation
    const resultsContainer = document.getElementById('results');
    resultsContainer.style.display = 'block';
    resultsContainer.style.opacity = '0';
    resultsContainer.style.transform = 'translateY(20px)';
    
    // Smooth animation
    setTimeout(() => {
        resultsContainer.style.transition = 'all 0.5s ease';
        resultsContainer.style.opacity = '1';
        resultsContainer.style.transform = 'translateY(0)';
        resultsContainer.classList.add('show');
    }, 50);

    // Scroll to results
    resultsContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
}

// Cold fermentation table lookup
function getColumnValue(temp, time) {
    const coldFermentationTable = {
        2: {121: 0.168, 103: 0.210, 90: 0.252, 80: 0.294},
        3: {121: 0.150, 103: 0.200, 90: 0.240, 80: 0.280},
        3.3: {50: 0.42, 59: 0.336, 65: 0.294, 72: 0.252, 82: 0.21, 97: 0.168, 120: 0.126, 161: 0.084},
        3.9: {45: 0.42, 53: 0.336, 58: 0.294, 65: 0.252, 74: 0.21, 87: 0.168, 108: 0.126, 145: 0.084, 159: 0.074},
        4.4: {40: 0.42, 48: 0.336, 52: 0.294, 59: 0.252, 67: 0.21, 79: 0.168, 97: 0.126, 130: 0.084, 144: 0.074, 161: 0.063},
        5: {37: 0.42, 43: 0.336, 47: 0.294, 53: 0.252, 61: 0.21, 71: 0.168, 88: 0.126, 118: 0.084, 130: 0.074, 145: 0.063, 166: 0.053},
        5.6: {33: 0.42, 39: 0.336, 43: 0.294, 48: 0.252, 55: 0.21, 65: 0.168, 80: 0.126, 107: 0.084, 118: 0.074, 132: 0.063, 151: 0.053},
        6.1: {30: 0.42, 35: 0.336, 39: 0.294, 44: 0.252, 50: 0.21, 59: 0.168, 72: 0.126, 97: 0.084, 107: 0.074, 120: 0.063, 137: 0.053, 161: 0.042},
        6.7: {27: 0.42, 32: 0.336, 36: 0.294, 40: 0.252, 45: 0.21, 53: 0.168, 66: 0.126, 88: 0.084, 98: 0.074, 109: 0.063, 125: 0.053, 147: 0.042},
        7.2: {25: 0.42, 29: 0.336, 32: 0.294, 36: 0.252, 41: 0.21, 49: 0.168, 60: 0.126, 81: 0.084, 89: 0.074, 100: 0.063, 114: 0.053, 134: 0.042, 165: 0.032},
        7.8: {23: 0.42, 27: 0.336, 30: 0.294, 33: 0.252, 38: 0.21, 45: 0.168, 55: 0.126, 74: 0.084, 81: 0.074, 91: 0.063, 104: 0.053, 122: 0.042, 151: 0.032},
        8.3: {21: 0.42, 25: 0.336, 27: 0.294, 30: 0.252, 35: 0.21, 41: 0.168, 50: 0.126, 67: 0.084, 74: 0.074, 83: 0.063, 95: 0.053, 112: 0.042, 138: 0.032},
        8.9: {19: 0.42, 23: 0.336, 25: 0.294, 28: 0.252, 32: 0.21, 37: 0.168, 46: 0.126, 62: 0.084, 68: 0.074, 76: 0.063, 87: 0.053, 102: 0.042, 126: 0.032},
        9.4: {18: 0.42, 21: 0.336, 23: 0.294, 26: 0.252, 29: 0.21, 34: 0.168, 42: 0.126, 56: 0.084, 61: 0.074, 68: 0.063, 78: 0.053, 92: 0.042, 115: 0.032},
        10: {16: 0.42, 19: 0.336, 21: 0.294, 23: 0.252, 27: 0.21, 32: 0.168, 39: 0.126, 52: 0.084, 57: 0.074, 63: 0.063, 73: 0.053, 86: 0.042, 107: 0.032},
        10.6: {15: 0.42, 18: 0.336, 19: 0.294, 22: 0.252, 25: 0.21, 29: 0.168, 36: 0.126, 48: 0.084, 53: 0.074, 59: 0.063, 68: 0.053, 80: 0.042, 100: 0.032},
        11.1: {14: 0.42, 16: 0.336, 18: 0.294, 20: 0.252, 23: 0.21, 27: 0.168, 33: 0.126, 44: 0.084, 49: 0.074, 54: 0.063, 63: 0.053, 75: 0.042, 94: 0.032},
        11.7: {13: 0.42, 15: 0.336, 16: 0.294, 18: 0.252, 21: 0.21, 25: 0.168, 30: 0.126, 40: 0.084, 45: 0.074, 50: 0.063, 58: 0.053, 69: 0.042, 87: 0.032},
        12.2: {12: 0.42, 14: 0.336, 15: 0.294, 17: 0.252, 19: 0.21, 23: 0.168, 28: 0.126, 37: 0.084, 42: 0.074, 46: 0.063, 54: 0.053, 64: 0.042, 81: 0.032},
        12.8: {11: 0.42, 13: 0.336, 14: 0.294, 16: 0.252, 18: 0.21, 21: 0.168, 26: 0.126, 34: 0.084, 38: 0.074, 42: 0.063, 49: 0.053, 59: 0.042, 74: 0.032},
        13.3: {10: 0.42, 12: 0.336, 13: 0.294, 15: 0.252, 17: 0.21, 20: 0.168, 24: 0.126, 31: 0.084, 35: 0.074, 38: 0.063, 44: 0.053, 53: 0.042, 67: 0.032},
        13.9: {9: 0.42, 11: 0.336, 12: 0.294, 14: 0.252, 15: 0.21, 18: 0.168, 22: 0.126, 28: 0.084, 31: 0.074, 34: 0.063, 40: 0.053, 48: 0.042, 61: 0.032},
        14.4: {9: 0.42, 10: 0.336, 11: 0.294, 13: 0.252, 14: 0.21, 17: 0.168, 21: 0.126, 26: 0.084, 29: 0.074, 32: 0.063, 37: 0.053, 45: 0.042, 58: 0.032},
        15: {8: 0.42, 9: 0.336, 10: 0.294, 12: 0.252, 13: 0.21, 16: 0.168, 19: 0.126, 24: 0.084, 27: 0.074, 30: 0.063, 34: 0.053, 42: 0.042, 54: 0.032},
        15.6: {7: 0.42, 9: 0.336, 10: 0.294, 11: 0.252, 12: 0.21, 15: 0.168, 18: 0.126, 22: 0.084, 25: 0.074, 28: 0.063, 32: 0.053, 39: 0.042, 50: 0.032},
        16.1: {7: 0.42, 8: 0.336, 9: 0.294, 10: 0.252, 12: 0.21, 14: 0.168, 17: 0.126, 21: 0.084, 23: 0.074, 26: 0.063, 30: 0.053, 36: 0.042, 46: 0.032},
        16.7: {6: 0.42, 8: 0.294, 9: 0.252, 11: 0.21, 13: 0.168, 16: 0.126, 20: 0.084, 22: 0.074, 25: 0.063, 29: 0.053, 35: 0.042, 44: 0.032, 57: 0.021},
        17.2: {6: 0.42, 7: 0.336, 8: 0.294, 9: 0.252, 10: 0.21, 12: 0.168, 15: 0.126, 19: 0.084, 21: 0.074, 24: 0.063, 28: 0.053, 34: 0.042, 43: 0.032, 56: 0.021},
        17.8: {6: 0.42, 7: 0.294, 8: 0.252, 9: 0.21, 11: 0.168, 14: 0.126, 18: 0.084, 20: 0.074, 23: 0.063, 26: 0.053, 30: 0.042, 37: 0.032, 50: 0.021, 73: 0.013, 98: 0.008, 162: 0.004},
        18.3: {5: 0.42, 6: 0.336, 7: 0.294, 8: 0.252, 9: 0.21, 10: 0.168, 13: 0.126, 17: 0.084, 19: 0.074, 21: 0.063, 24: 0.053, 28: 0.042, 35: 0.032, 47: 0.021, 68: 0.013, 92: 0.008, 152: 0.004},
        18.9: {5: 0.42, 6: 0.294, 7: 0.252, 8: 0.21, 10: 0.168, 12: 0.126, 16: 0.084, 18: 0.074, 20: 0.063, 23: 0.053, 27: 0.042, 33: 0.032, 44: 0.021, 64: 0.013, 86: 0.008, 142: 0.004},
        19.4: {5: 0.336, 6: 0.294, 7: 0.252, 8: 0.21, 9: 0.168, 11: 0.126, 15: 0.084, 17: 0.074, 19: 0.063, 21: 0.053, 25: 0.042, 31: 0.032, 41: 0.021, 60: 0.013, 80: 0.008, 133: 0.004},
        20: {4: 0.42, 5: 0.294, 6: 0.252, 7: 0.21, 8: 0.168, 10: 0.126, 14: 0.084, 15: 0.074, 17: 0.063, 19: 0.053, 22: 0.042, 28: 0.032, 37: 0.021, 54: 0.013, 73: 0.008, 120: 0.004},
        20.6: {4: 0.336, 5: 0.294, 6: 0.21, 7: 0.168, 9: 0.126, 12: 0.084, 14: 0.074, 15: 0.063, 17: 0.053, 20: 0.042, 25: 0.032, 34: 0.021, 49: 0.013, 66: 0.008, 109: 0.004},
        21.1: {3: 0.42, 4: 0.294, 5: 0.252, 6: 0.21, 7: 0.168, 8: 0.126, 10: 0.084, 11: 0.074, 12: 0.063, 14: 0.053, 16: 0.042, 19: 0.032, 23: 0.021, 31: 0.013, 45: 0.008, 99: 0.004},
        21.7: {3: 0.42, 4: 0.294, 5: 0.21, 6: 0.168, 8: 0.126, 10: 0.084, 11: 0.074, 13: 0.063, 14: 0.053, 17: 0.042, 21: 0.032, 28: 0.021, 41: 0.013, 55: 0.008, 90: 0.004},
        22.2: {3: 0.336, 4: 0.252, 5: 0.21, 6: 0.168, 7: 0.126, 9: 0.084, 10: 0.074, 12: 0.063, 13: 0.053, 15: 0.042, 19: 0.032, 26: 0.021, 37: 0.013, 50: 0.008, 83: 0.004}
    };

    // Find nearest temperature
    if (!coldFermentationTable[temp]) {
        const tempKeys = Object.keys(coldFermentationTable).map(Number);
        const nearestTemp = tempKeys.reduce((prev, curr) => Math.abs(curr - temp) < Math.abs(prev - temp) ? curr : prev);
        temp = nearestTemp;
        debug(`Temperature rounded to ${nearestTemp}°C`);
    }

    // Find nearest time
    const timeKeys = Object.keys(coldFermentationTable[temp]).map(Number);
    const nearestTime = timeKeys.reduce((prev, curr) => Math.abs(curr - time) < Math.abs(prev - time) ? curr : prev);
    debug(`Nearest time for ${time} hours at ${temp}°C is ${nearestTime} hours`);

    return coldFermentationTable[temp][nearestTime];
}

// Warm fermentation table lookup
function getRowValue(temp, spaltenwert) {
    const warmFermentationTable = {
        4.4: {0.42: 40, 0.336: 48, 0.294: 52, 0.252: 59, 0.21: 67, 0.168: 79, 0.126: 97, 0.084: 130, 0.074: 144, 0.063: 161},
        5: {0.42: 37, 0.336: 43, 0.294: 47, 0.252: 53, 0.21: 61, 0.168: 71, 0.126: 88, 0.084: 118, 0.074: 130, 0.063: 145, 0.053: 166},
        5.6: {0.42: 33, 0.336: 39, 0.294: 43, 0.252: 48, 0.21: 55, 0.168: 65, 0.126: 80, 0.084: 107, 0.074: 118, 0.063: 132, 0.053: 151},
        6.1: {0.42: 30, 0.336: 35, 0.294: 39, 0.252: 44, 0.21: 50, 0.168: 59, 0.126: 72, 0.084: 97, 0.074: 107, 0.063: 120, 0.053: 137, 0.042: 161},
        6.7: {0.42: 27, 0.336: 32, 0.294: 36, 0.252: 40, 0.21: 45, 0.168: 53, 0.126: 66, 0.084: 88, 0.074: 98, 0.063: 109, 0.053: 125, 0.042: 147},
        7.2: {0.42: 25, 0.336: 29, 0.294: 32, 0.252: 36, 0.21: 41, 0.168: 49, 0.126: 60, 0.084: 81, 0.074: 89, 0.063: 100, 0.053: 114, 0.042: 134, 0.032: 165},
        7.8: {0.42: 23, 0.336: 27, 0.294: 30, 0.252: 33, 0.21: 38, 0.168: 45, 0.126: 55, 0.084: 74, 0.074: 81, 0.063: 91, 0.053: 104, 0.042: 122, 0.032: 151},
        8.3: {0.42: 21, 0.336: 25, 0.294: 27, 0.252: 30, 0.21: 35, 0.168: 41, 0.126: 50, 0.084: 67, 0.074: 74, 0.063: 83, 0.053: 95, 0.042: 112, 0.032: 138},
        8.9: {0.42: 19, 0.336: 23, 0.294: 25, 0.252: 28, 0.21: 32, 0.168: 37, 0.126: 46, 0.084: 62, 0.074: 68, 0.063: 76, 0.053: 87, 0.042: 102, 0.032: 126},
        9.4: {0.42: 18, 0.336: 21, 0.294: 23, 0.252: 26, 0.21: 29, 0.168: 34, 0.126: 42, 0.084: 56, 0.074: 61, 0.063: 68, 0.053: 78, 0.042: 92, 0.032: 115},
        13.9: {0.42: 9, 0.336: 11, 0.294: 12, 0.252: 14, 0.21: 15, 0.168: 18, 0.126: 22, 0.084: 28, 0.074: 31, 0.063: 34, 0.053: 40, 0.042: 48, 0.032: 61},
        14.4: {0.42: 9, 0.336: 10, 0.294: 11, 0.252: 13, 0.21: 14, 0.168: 17, 0.126: 21, 0.084: 26, 0.074: 29, 0.063: 32, 0.053: 37, 0.042: 45, 0.032: 58},
        15: {0.42: 8, 0.336: 9, 0.294: 10, 0.252: 12, 0.21: 13, 0.168: 16, 0.126: 19, 0.084: 24, 0.074: 27, 0.063: 30, 0.053: 34, 0.042: 42, 0.032: 54},
        15.6: {0.42: 7, 0.336: 9, 0.294: 10, 0.252: 11, 0.21: 12, 0.168: 15, 0.126: 18, 0.084: 22, 0.074: 25, 0.063: 28, 0.053: 32, 0.042: 39, 0.032: 50},
        16.1: {0.42: 7, 0.336: 8, 0.294: 9, 0.252: 10, 0.21: 12, 0.168: 14, 0.126: 17, 0.084: 21, 0.074: 23, 0.063: 26, 0.053: 30, 0.042: 36, 0.032: 46},
        16.7: {0.42: 6, 0.294: 8, 0.252: 9, 0.21: 11, 0.168: 13, 0.126: 16, 0.084: 20, 0.074: 22, 0.063: 25, 0.053: 29, 0.042: 35, 0.032: 44, 0.021: 57},
        17.2: {0.42: 6, 0.336: 7, 0.294: 8, 0.252: 9, 0.21: 10, 0.168: 12, 0.126: 15, 0.084: 19, 0.074: 21, 0.063: 24, 0.053: 28, 0.042: 34, 0.032: 43, 0.021: 56},
        17.8: {0.42: 6, 0.294: 7, 0.252: 8, 0.21: 9, 0.168: 11, 0.126: 14, 0.084: 18, 0.074: 20, 0.063: 23, 0.053: 26, 0.042: 30, 0.032: 37, 0.021: 50, 0.013: 73, 0.008: 98, 0.004: 162},
        18.3: {0.42: 5, 0.336: 6, 0.294: 7, 0.252: 8, 0.21: 9, 0.168: 10, 0.126: 13, 0.084: 17, 0.074: 19, 0.063: 21, 0.053: 24, 0.042: 28, 0.032: 35, 0.021: 47, 0.013: 68, 0.008: 92, 0.004: 152},
        18.9: {0.42: 5, 0.294: 6, 0.252: 7, 0.21: 8, 0.168: 10, 0.126: 12, 0.084: 16, 0.074: 18, 0.063: 20, 0.053: 23, 0.042: 27, 0.032: 33, 0.021: 44, 0.013: 64, 0.008: 86, 0.004: 142},
        19.4: {0.336: 5, 0.294: 6, 0.252: 7, 0.21: 8, 0.168: 9, 0.126: 11, 0.084: 15, 0.074: 17, 0.063: 19, 0.053: 21, 0.042: 25, 0.032: 31, 0.021: 41, 0.013: 60, 0.008: 80, 0.004: 133},
        20: {0.42: 4, 0.294: 5, 0.252: 6, 0.21: 7, 0.168: 8, 0.126: 10, 0.084: 14, 0.074: 15, 0.063: 17, 0.053: 19, 0.042: 22, 0.032: 28, 0.021: 37, 0.013: 54, 0.008: 73, 0.004: 120},
        20.6: {0.336: 4, 0.294: 5, 0.21: 6, 0.168: 7, 0.126: 9, 0.084: 12, 0.074: 14, 0.063: 15, 0.053: 17, 0.042: 20, 0.032: 25, 0.021: 34, 0.013: 49, 0.008: 66, 0.004: 109},
        21.1: {0.42: 3, 0.294: 4, 0.252: 5, 0.21: 6, 0.168: 7, 0.126: 8, 0.084: 10, 0.074: 11, 0.063: 12, 0.053: 14, 0.042: 16, 0.032: 19, 0.021: 23, 0.013: 31, 0.008: 45, 0.004: 99},
        21.7: {0.42: 3, 0.294: 4, 0.21: 5, 0.168: 6, 0.126: 8, 0.084: 10, 0.074: 11, 0.063: 13, 0.053: 14, 0.042: 17, 0.032: 21, 0.021: 28, 0.013: 41, 0.008: 55, 0.004: 90},
        22.2: {0.336: 3, 0.252: 4, 0.21: 5, 0.168: 6, 0.126: 7, 0.084: 9, 0.074: 10, 0.063: 12, 0.053: 13, 0.042: 15, 0.032: 19, 0.021: 26, 0.013: 37, 0.008: 50, 0.004: 83}
    };

    // Find nearest temperature
    if (!warmFermentationTable[temp]) {
        const tempKeys = Object.keys(warmFermentationTable).map(Number);
        const nearestTemp = tempKeys.reduce((prev, curr) => Math.abs(curr - temp) < Math.abs(prev - temp) ? curr : prev);
        temp = nearestTemp;
        debug(`Temperature rounded to ${nearestTemp}°C`);
    }

    // Find nearest column value
    const spaltenwertKeys = Object.keys(warmFermentationTable[temp]).map(Number);
    const nearestSpaltenwert = spaltenwertKeys.reduce((prev, curr) => Math.abs(curr - spaltenwert) < Math.abs(prev - spaltenwert) ? curr : prev);
    debug(`Nearest column value for ${spaltenwert} is ${nearestSpaltenwert}`);

    return warmFermentationTable[temp][nearestSpaltenwert];
}

// Yeast percentage calculation
function getYeastPercentage(temp, totalTime) {
    const yeastPercentageTable = {
        2: {121: 0.00168, 103: 0.00210, 90: 0.00252, 80: 0.00294},
        3: {121: 0.00150, 103: 0.00200, 90: 0.00240, 80: 0.00280},
        3.3: {50: 0.0042, 59: 0.00336, 65: 0.00294, 72: 0.00252, 82: 0.0021, 97: 0.00168, 120: 0.00126, 161: 0.00084},
        3.9: {45: 0.0042, 53: 0.00336, 58: 0.00294, 65: 0.00252, 74: 0.0021, 87: 0.00168, 108: 0.00126, 145: 0.00084, 159: 0.00074},
        4.4: {40: 0.0042, 48: 0.00336, 52: 0.00294, 59: 0.00252, 67: 0.0021, 79: 0.00168, 97: 0.00126, 130: 0.00084, 144: 0.00074, 161: 0.00063},
        5: {37: 0.0042, 43: 0.00336, 47: 0.00294, 53: 0.00252, 61: 0.0021, 71: 0.00168, 88: 0.00126, 118: 0.00084, 130: 0.00074, 145: 0.00063, 166: 0.00053},
        5.6: {33: 0.0042, 39: 0.00336, 43: 0.00294, 48: 0.00252, 55: 0.0021, 65: 0.00168, 80: 0.00126, 107: 0.00084, 118: 0.00074, 132: 0.00063, 151: 0.00053},
        6.1: {30: 0.0042, 35: 0.00336, 39: 0.00294, 44: 0.00252, 50: 0.0021, 59: 0.00168, 72: 0.00126, 97: 0.00084, 107: 0.00074, 120: 0.00063, 137: 0.00053, 161: 0.00042},
        6.7: {27: 0.0042, 32: 0.00336, 36: 0.00294, 40: 0.00252, 45: 0.0021, 53: 0.00168, 66: 0.00126, 88: 0.00084, 98: 0.00074, 109: 0.00063, 125: 0.00053, 147: 0.00042},
        7.2: {25: 0.0042, 29: 0.00336, 32: 0.00294, 36: 0.00252, 41: 0.0021, 49: 0.00168, 60: 0.00126, 81: 0.00084, 89: 0.00074, 100: 0.00063, 114: 0.00053, 134: 0.00042, 165: 0.00032},
        7.8: {23: 0.0042, 27: 0.00336, 30: 0.00294, 33: 0.00252, 38: 0.0021, 45: 0.00168, 55: 0.00126, 74: 0.00084, 81: 0.00074, 91: 0.00063, 104: 0.00053, 122: 0.00042, 151: 0.00032},
        8.3: {21: 0.0042, 25: 0.00336, 27: 0.00294, 30: 0.00252, 35: 0.0021, 41: 0.00168, 50: 0.00126, 67: 0.00084, 74: 0.00074, 83: 0.00063, 95: 0.00053, 112: 0.00042, 138: 0.00032},
        8.9: {19: 0.0042, 23: 0.00336, 25: 0.00294, 28: 0.00252, 32: 0.0021, 37: 0.00168, 46: 0.00126, 62: 0.00084, 68: 0.00074, 76: 0.00063, 87: 0.00053, 102: 0.00042, 126: 0.00032},
        9.4: {18: 0.0042, 21: 0.00336, 23: 0.00294, 26: 0.00252, 29: 0.0021, 34: 0.00168, 42: 0.00126, 56: 0.00084, 61: 0.00074, 68: 0.00063, 78: 0.00053, 92: 0.00042, 115: 0.00032},
        10: {16: 0.0042, 19: 0.00336, 21: 0.00294, 23: 0.00252, 27: 0.0021, 32: 0.00168, 39: 0.00126, 52: 0.00084, 57: 0.00074, 63: 0.00063, 73: 0.00053, 86: 0.00042, 107: 0.00032},
        10.6: {15: 0.0042, 18: 0.00336, 19: 0.00294, 22: 0.00252, 25: 0.0021, 29: 0.00168, 36: 0.00126, 48: 0.00084, 53: 0.00074, 59: 0.00063, 68: 0.00053, 80: 0.00042, 100: 0.00032},
        11.1: {14: 0.0042, 16: 0.00336, 18: 0.00294, 20: 0.00252, 23: 0.0021, 27: 0.00168, 33: 0.00126, 44: 0.00084, 49: 0.00074, 54: 0.00063, 63: 0.00053, 75: 0.00042, 94: 0.00032},
        11.7: {13: 0.0042, 15: 0.00336, 16: 0.00294, 18: 0.00252, 21: 0.0021, 25: 0.00168, 30: 0.00126, 40: 0.00084, 45: 0.00074, 50: 0.00063, 58: 0.00053, 69: 0.00042, 87: 0.00032},
        12.2: {12: 0.0042, 14: 0.00336, 15: 0.00294, 17: 0.00252, 19: 0.0021, 23: 0.00168, 28: 0.00126, 37: 0.00084, 42: 0.00074, 46: 0.00063, 54: 0.00053, 64: 0.00042, 81: 0.00032},
        12.8: {11: 0.0042, 13: 0.00336, 14: 0.00294, 16: 0.00252, 18: 0.0021, 21: 0.00168, 26: 0.00126, 34: 0.00084, 38: 0.00074, 42: 0.00063, 49: 0.00053, 59: 0.00042, 74: 0.00032},
        13.3: {10: 0.0042, 12: 0.00336, 13: 0.00294, 15: 0.00252, 17: 0.0021, 20: 0.00168, 24: 0.00126, 31: 0.00084, 35: 0.00074, 38: 0.00063, 44: 0.00053, 53: 0.00042, 67: 0.00032},
        13.9: {9: 0.0042, 11: 0.00336, 12: 0.00294, 14: 0.00252, 15: 0.0021, 18: 0.00168, 22: 0.00126, 28: 0.00084, 31: 0.00074, 34: 0.00063, 40: 0.00053, 48: 0.00042, 61: 0.00032},
        14.4: {9: 0.0042, 10: 0.00336, 11: 0.00294, 13: 0.00252, 14: 0.0021, 17: 0.00168, 21: 0.00126, 26: 0.00084, 29: 0.00074, 32: 0.00063, 37: 0.00053, 45: 0.00042, 58: 0.00032},
        15: {8: 0.0042, 9: 0.00336, 10: 0.00294, 12: 0.00252, 13: 0.0021, 16: 0.00168, 19: 0.00126, 24: 0.00084, 27: 0.00074, 30: 0.00063, 34: 0.00053, 42: 0.00042, 54: 0.00032},
        15.6: {7: 0.0042, 9: 0.00336, 10: 0.00294, 11: 0.00252, 12: 0.0021, 15: 0.00168, 18: 0.00126, 22: 0.00084, 25: 0.00074, 28: 0.00063, 32: 0.00053, 39: 0.00042, 50: 0.00032},
        16.1: {7: 0.0042, 8: 0.00336, 9: 0.00294, 10: 0.00252, 12: 0.0021, 14: 0.00168, 17: 0.00126, 21: 0.00084, 23: 0.00074, 26: 0.00063, 30: 0.00053, 36: 0.00042, 46: 0.00032},
        16.7: {6: 0.0042, 8: 0.00294, 9: 0.00252, 11: 0.0021, 13: 0.00168, 16: 0.00126, 20: 0.00084, 22: 0.00074, 25: 0.00063, 29: 0.00053, 35: 0.00042, 44: 0.00032, 57: 0.00021},
        17.2: {6: 0.0042, 7: 0.00336, 8: 0.00294, 9: 0.00252, 10: 0.0021, 12: 0.00168, 15: 0.00126, 19: 0.00084, 21: 0.00074, 24: 0.00063, 28: 0.00053, 34: 0.00042, 43: 0.00032, 56: 0.00021},
        17.8: {6: 0.0042, 7: 0.00294, 8: 0.00252, 9: 0.0021, 11: 0.00168, 14: 0.00126, 18: 0.00084, 20: 0.00074, 23: 0.00063, 26: 0.00053, 30: 0.00042, 37: 0.00032, 50: 0.00021, 73: 0.00013, 98: 0.00008, 162: 0.00004},
        18.3: {5: 0.0042, 6: 0.00336, 7: 0.00294, 8: 0.00252, 9: 0.0021, 10: 0.00168, 13: 0.00126, 17: 0.00084, 19: 0.00074, 21: 0.00063, 24: 0.00053, 28: 0.00042, 35: 0.00032, 47: 0.00021, 68: 0.00013, 92: 0.00008, 152: 0.00004},
        18.9: {5: 0.0042, 6: 0.00294, 7: 0.00252, 8: 0.0021, 10: 0.00168, 12: 0.00126, 16: 0.00084, 18: 0.00074, 20: 0.00063, 23: 0.00053, 27: 0.00042, 33: 0.00032, 44: 0.00021, 64: 0.00013, 86: 0.00008, 142: 0.00004},
        19.4: {5: 0.00336, 6: 0.00294, 7: 0.00252, 8: 0.0021, 9: 0.00168, 11: 0.00126, 15: 0.00084, 17: 0.00074, 19: 0.00063, 21: 0.00053, 25: 0.00042, 31: 0.00032, 41: 0.00021, 60: 0.00013, 80: 0.00008, 133: 0.00004},
        20: {4: 0.0042, 5: 0.00294, 6: 0.00252, 7: 0.0021, 8: 0.00168, 10: 0.00126, 14: 0.00084, 15: 0.00074, 17: 0.00063, 19: 0.00053, 22: 0.00042, 28: 0.00032, 37: 0.00021, 54: 0.00013, 73: 0.00008, 120: 0.00004},
        20.6: {4: 0.00336, 5: 0.00294, 6: 0.0021, 7: 0.00168, 9: 0.00126, 12: 0.00084, 14: 0.00074, 15: 0.00063, 17: 0.00053, 20: 0.00042, 25: 0.00032, 34: 0.00021, 49: 0.00013, 66: 0.00008, 109: 0.00004},
        21.1: {3: 0.0042, 4: 0.00294, 5: 0.00252, 6: 0.0021, 7: 0.00168, 8: 0.00126, 10: 0.00084, 11: 0.00074, 12: 0.00063, 14: 0.00053, 16: 0.00042, 19: 0.00032, 23: 0.00021, 31: 0.00013, 45: 0.00008, 99: 0.00004},
        21.7: {3: 0.0042, 4: 0.00294, 5: 0.0021, 6: 0.00168, 8: 0.00126, 10: 0.00084, 11: 0.00074, 13: 0.00063, 14: 0.00053, 17: 0.00042, 21: 0.00032, 28: 0.00021, 41: 0.00013, 55: 0.00008, 90: 0.00004},
        22.2: {3: 0.00336, 4: 0.00252, 5: 0.0021, 6: 0.00168, 7: 0.00126, 9: 0.00084, 10: 0.00074, 12: 0.00063, 13: 0.00053, 15: 0.00042, 19: 0.00032, 26: 0.00021, 37: 0.00013, 50: 0.00008, 83: 0.00004}
    };

    if (!yeastPercentageTable[temp]) {
        const tempKeys = Object.keys(yeastPercentageTable).map(Number);
        const nearestTemp = tempKeys.reduce((prev, curr) => Math.abs(curr - temp) < Math.abs(prev - temp) ? curr : prev);
        temp = nearestTemp;
        debug(`Temperature rounded to ${nearestTemp}°C`);
    }

    const timeKeys = Object.keys(yeastPercentageTable[temp]).map(Number);
    const nearestTime = timeKeys.reduce((prev, curr) => Math.abs(curr - totalTime) < Math.abs(prev - totalTime) ? curr : prev);
    debug(`Nearest total fermentation time for ${totalTime} hours is ${nearestTime} hours`);

    return yeastPercentageTable[temp][nearestTime];
}

// Debug function
function debug(label, value) {
    console.log(`${label}:`, value);
}